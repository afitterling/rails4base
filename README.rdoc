== README

An app clinging rails4 and angularJS basic functionalities together.

It provides:

* the structure of modern single page driven web apps, using promises client side to hide latencies and to increase implementation quality for advanced user / micro interactions

* client site routing with AngularJS using rails as backend

* user registration/authentication using angular and devise with secure client and server side routing

* server side regexp mathings in routes.rb to secure angular partials/pages client side!

* twitter bootstrap 3+ integrated

* scaleable, clusterable

* in case of jruby: easy maintainable / installable (see torquebox)

What follows:

* torquebox features, such as message queues to connect be with client (real time!)


=== Setup

Use jruby:
<tt>rvm use jruby</tt>

for testing in console:
<tt>gem install torquebox</tt>
(Do not include in Gemfile. Server side use binary package instead: http://torquebox.org/)

<tt>torquebox run</tt>

<tt>torquebox deploy</tt>

==== production

* Install binary package, just bundle.

* Use Nginx or Apache  as reverse proxy (see Apache's mod cluster: http://www.headlondon.com/our-thoughts/technology/posts/installing-torquebox-application-server-on-debian).

No name collisions with rails apps!!!! great!!!

<tt>bundle</tt>

<tt>RAILS_ENV=production rake db:migrate</tt>

<tt>RAILS_ENV=production rake assets:precompile</tt>

Setting RAILS_RELATIVE_URL_ROOT is necessary if deploying to context path:
<tt>RAILS_RELATIVE_URL_ROOT='/subpath' RAILS_ENV=production torquebox deploy --context-path='/subpath'</tt>

Nginx example config:

<tt>server {
  listen 80;
  server_name app3.sp33c.de;
  rewrite ^/subpath(/.*)$ $1 last; // if deploying with context path
  location / {
    root /home/torquebox/railsapp/public;
    proxy_pass http://87.230.18.238:8080/subpath/;
    proxy_set_header   X-Real-IP        $remote_addr;
    proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
    proxy_set_header   Host $http_host;
  }
}</tt>
